abduction ['앱덕', '원인 짐작하기']
abstract class ['클래스 허물', '껍데기 클래스', '허물 클래스', '클래스 껍데기']
abstract interpretation ['요약해석']
abstract machine ['실행기계', ' 언어실행기', ' 기계어실행기']
abstract method ['함수 껍데기', '함수 허물', '껍데기 함수', '허물 함수']
abstract semantics ['요약된 의미구조', '요약 의미']
abstract syntax ['문장 구성규칙', '문장 구성방법', '요약한 구조', '본질 문법', '문장 구성법', '문장 조립법', '문장 조립규칙', '문장 조립방법', '핵심 문법구조', '뼈대 구문']
abstract type ['핵심만 드러낸 타입', '구현된 속사정이 감추어진 타입', '속내용이 감추어진 타입']
abstraction ['요약', '속내용 감추기', '핵심 드러내기']
abstraction hierarchy ['핵심간추린 것으로 차곡차곡 쌓기', '요약 단계', '속내용 감추며 차곡차곡 쌓기']
ad-hoc polymorphism ['타입적응하는 ', '가짜 다형성', '임기응변 다형성', '타입따라 변하기', ' 타입따라 변하는', ' 타입따라 다른 ']
algebraic effect []
algebraic type []
alias ['별명']
allocation ['메모리 할당']
annotation ['붙여쓰기', ' 붙여쓴글', '덧댄글', ' 덧글', ' 몇마디']
application ['호출', '사용']
applicative language ['값중심 언어', '함수형 언어', '계산중심 언어']
assertion ['꼭  ', '이랴해', '주장 ', '떼쓰기', '단언 ']
assignment ['메모리에 쓰기', '값 기록하기', '기록하기']
associativity ['방향성', '결합법칙', '결합순서']
asynchronous programming ['비동기 프로그래밍']
attribute grammar ['일거리가 딸려있는 문법', '일거리딸린 문법', '할일딸린 문법', '할일이 딸려있는 문법']
axiomatic theory ['엄밀한 이론', '공리에 기초한 이론']
backend ['뒷단 ', '속내용']
bi-variant ['맞춰거슬러 변하기']
binary ['두개의']
bind ['정의하다', '이름짓다']
binding ['명명하기', '이름짓기', '정의하기']
Boolean expression ['부울식']
borrowing ['빌리기']
bottom ['바닥']
bottom-up program synthesis ['바닥부터 프로그램 합성해가기', '재료부터 정해서 프로그램 요리하기', '작은 식 조립해서 큰 프로그램 합성하기', '부품에서 전체로 프로그램 합성하기', '조립식으로 합성하기']
bounded probabilistic polynomial ['오류율을 잡아둘 수 있는 확률형 다항']
bounded quantification ['한정해서 일반화시키기', '울타리안에서 일반화시키기']
bubble sort ['거품 정렬', '뽀글뽀글정렬']
bug ['오류', ' 실수']
built-in ['이미 있는', '붙박이']
cache ['중간저장소', '보따리', ' 가방', ' 주머니', '주머니']
calculus ['계산법', '셈법']
call by name ['식전달 호출', '인자 먼저']
call by reference ['주소전달 호출']
call by value ['적용 먼저', '값전달 호출']
Cartesian product ['데카르트 곱', '완전곱']
case expression ['갈라치기식', '선택식', '분기식']
class ['클래스', '틀   ', '물건틀']
class method ['붕어빵틀이 제공하는 함수', '함수 ']
closure ['오므린함수', '함수값', '다된함수', ' 닫힌함수']
closure conversion ['함수가 인자를 통해서만 외부와 소통하게 하는 변환', '함수 변환', '함수의 자유변수를 없애주는 변환']
co-variant ['맞춰 변하기']
compilation ['프로그램 번역', '언어의 기계어 변환']
compilation unit ['컴파일 단위', '번역 단위']
complete ['빠뜨린게 없는', '완전한', '빠뜨림이 없는']
complete partial-order set ['완전한 부분순서 집합']
completeness ['완전성', '빠뜨림없슴', '완전함']
compositional ['조립식']
compositionality ['조립식']
computation ['계산']
computation strategy ['계산 방식', '계산 전략']
computational complexity ['계산 복잡도']
computational learning theory ['계산 학습 이론']
concrete semantics ['구체적 의미', '의미', ' 의미구조']
concrete syntax ['문장구조 복원방법', '문장구조 복원법', '문장구조 복원규칙', '문장구조 파악법', '문장구조 파악규칙', '문장구조 파악방법', '구체적 문법구조']
conjunction ['그리고-식']
conjunctive normal form ['그리고-조합 표준형', '그리고-조합 바른 식']
consistency ['일관성']
constant ['상수']
constraint ['제약']
constraint expression ['제약식']
container ['컨테이너', '수송용기']
context ['문맥', '환경']
continuation ['앞으로 할 계산', '후속 ', '앞으로 할 일']
continuation passing style ['앞으로 할 일을 함수로 표현해서 전달하는', '계산과정을 전달하는', '앞으로 할 일 전달하는']
continuation passing style transform ['앞으로 할 일 전달 변환']
contra-variant ['거슬러 변하기']
control flow analysis ['실행 흐름 분석', '함수 흐름 분석']
control structure ['실행 흐름']
convergent ['수렴하는']
convex programming ['볼록 프로그래밍']
coroutine ['협동 과정', '코루틴']
correctness ['올바름', '맞음']
cost-effective ['비용이 아깝지않은', ' 돈이 안아까운', '품이 아깝지않은', '가성비 좋은']
cost-ineffective ['가성비 나쁜', '품이 많이 드는', '돈이 아까운', '비용이 아까운']
coverage ['흔적  ', '커버한범위', '짚은범위', '덮는 범위', '진도 ', '보장범위']
curried application ['커리형 함수 적용', '여러인자를 줄세워 전달하기', '함수를 야금야금 적용하기']
curried function ['커리형 함수', '여러인자를 야금야금 받는 함수', '여러인자를 줄세워 받는 함수', '야금야금 함수']
dangling pointer ['오리알 포인터', '헛 포인터', '재활용된 메모리', '오염된 메모리']
data constructor ['자료 구성자', '데이타 구성자']
data structure ['데이타 구조', '자료 정리한 모양', '자료 구조']
de-sugar ['설탕구조를 녹이다', '설탕 구조를 풀다']
dead code ['무용지물 코드', '쓸데없는 코드']
decision problem ['예-아니오 문제']
decision procedure ['예-아니오 판정 알고리즘', '예-아니오 판정 프로그램']
declaration ['선언']
deduction ['반드시 이끌기', '디덕']
deep neural net ['딥뉴럴넷', '깊은 신경망']
definitional interpreter ['실행기']
delayed evaluation ['값 계산을 최대한 미루기', '미루어 계산하기']
delimiter ['구별문자', '구분문자']
denial-of-service ['업무방해', '길막. ', '체증 ']
denotational semanitcs ['고정점방식 의미구조', '궁극의 의미하는 바를 표현하는 의미구조', '조립식 의미구조']
dependent type ['값에 기댄 타입', '값을 끼고 정의한 타입']
dereference ['메모리읽기', '값꺼내기']
destructive ['저장값을 변동시키는', '메모리값을 변동시키는']
determinisitc ['계산이 한가지로 확실한', '계산이 하나로 확실한', '한가지로 정해진', '모든게 정해진']
digit ['숫자']
disjunction ['또는-식']
disjunctive normal form ['또는-조합 바른식', '또는-조합 표준형']
dynamic dispatch ['호출할 함수가 실행중에 결정되는', '동적 함수호출']
dynamic programming ['기억하며 풀기', '물려받기 계산법', '계승 계산법', '이어받기 계산법']
dynamic scoping ['이름의 유효범위가 실행 중에 결정되는', '실행중에 드러나는 이름의 실체', '동적으로 유효범위 정하기']
dynamic semantics ['프로그램 실행 의미구조', '프로그램 실행', '동적 의미구조']
dynamic type ['실행중에 드러난 타입']
dynamically typed language ['계산중에 타입검사하는 언어', '실행중에 타입검사하는 언어', '돌때 타입검사하는 언어']
eager evaluation ['적극적인 계산', '적극적인 계산법', '부지런한 계산법', '바로계산', '부지런한 계산']
effect type ['값종류 이외의 성질을 추적하는 타입', '기타성질을 추적하는 타입']
environment ['이름표 목록', '이름의 실체를 보여주는 목록', '환경']
equality saturation ['동일식 다모으기', '동일식 전부 찾아내기', '동일식 모두탐색']
equational reasoning ['같은것을 따지기', '같은것들로 따져가기']
error ['오류']
evaluation ['값계산', '계산', '실행']
evaluation strategy ['계산방식', '계산법']
exception ['예외상황', '예외']
exception bind ['예외상황 정의']
exception handling ['예외상황 처리', '예외처리']
existentially quantified type ['타입변수가 어떤 타입으로 바꿔치기될 수 있는']
expression ['식', '계산식', '프로그램식']
fairness ['골고루', ' 공평', ' 두루빠짐없이']
first-class function ['특이하게 취급되지않는 함수', '다되는 함수', '함수가 특이하게 취급되지않는', '차별받지않는 함수']
first-order equational logic ['단순 등식논리']
foreign language interface ['다른 언어로 짜여진 프로그램과 연결하는 방법', '외부 언어와 연결하는 방법']
formal verification ['엄격하게 검증하기', '찐검증', '엄검증', '엄격한 검증']
free identifier ['묶이지않은 이름', '자유로운 이름', '정의안된 이름', '실체없는 이름']
free type name ['묶이지않은 타입이름']
free variable ['실체없는 변수', '자유로운 변수', '정의안된 변수', '자유변수', '묶이지않은 변수']
frontend ['겉내용', '앞단 ']
function ['함수']
function abstraction ['함수', '함수로 만들기', '함수로 핵심 간추리기', '함수로 속내용 감추기']
function application ['함수 사용', '함수 호출']
function argument ['함수 인자']
function expression ['함수식']
function overloading ['여러함수를 같은 이름으로']
functional language ['값중심 언어', '함수형 언어', '함수중심 언어']
functional programming ['함수형 프로그래밍', '값중심 프로그래밍']
functional style ['함수중심 스타일', '함수형 스타일', '값중심 스타일']
functor ['모듈 만드는 함수', '모듈함수']
functor signature instantiation ['모듈함수 타입의 실현']
fuzzing ['sw고장내기', '마구넣기', '마구잡이 sw깨기', '마구잡이 깨기', '마구실행', '실행탐험']
garbage collection ['메모리 우렁각시', '메모리 수거', '자원 재활용', '노는 메모리 자동 수거', '스마트 로봇 청소기', '메모리 재활용', '쓰레기통 비우기', ' 휴지통 비우기']
gradual typing ['실행전과 실행중 타입검사 섞어하기']
grammar ['문법']
halting problem ['멈춤문제']
hashing ['으깨기', '멀리대응시키기', '다른세상에서멀리대응시키기', '외따로보내버리기']
hazard pointer ['에비에비 포인터']
heap profiler ['메모리 사용 측량기', '메모리 사용 계측기']
hierarchy ['계층구조 형성하기', '계층구조']
high-order function ['고차 함수', '함수를 주고받는 함수']
homomorphic ['생긴구조가 같은', '동형의']
homomorphic encryption ['암호문안에서 연산가능한 암호체계', '동형암호']
identifier ['이름']
identity function ['일없는 함수']
iff ['때면이', '이면면', '이면이', '이면-이려면', '이면/일때만']
immutable ['변할수없는', '불변 ']
imperative language ['기계중심 언어', '명령형 언어', '행동지침형 언어']
incomplete ['빠진게 있는', '완전하지않은', '빠뜨린게 있는', '불완전한']
incompleteness theorem ['불완전성 정리', '기계적인 방식으로는 늘 빠뜨린게 있다는 정리']
induction ['인덕', '짐작해서 이끌기']
infix ['사이끼기']
informal ['느낌적인']
informal verification ['감검증', '느낌검증', '가검증']
insertion sort ['끼워넣기 정렬']
instrument ['양념  ', '코드 욱여넣기', '장치달기']
interface ['접속형태', '접속방안', '사용법', '허물']
interpretation ['실행']
interpreter ['실행기']
invariant ['꾸준한 성질', '항상성질', '불변성질', '변함없는 성질']
isomorphic ['똑같은']
iteration ['반복']
just-in time compiler ['때맞춰 작동하는 번역기', '바로바로 번역기', '때맞춘 번역기', '제때 번역기', '실행때 번역기']
kind ['타입의 타입']
lattice ['래티스']
lazy evaluation ['값 계산을 최대한 미루는', '소극적 계산법', '제때 계산법', '미룬계산', '필요한 때만 값을 계산하는']
leaf ['잎', ' 이파리', '말단노드']
lexer ['낱말파악기']
lexical analysis ['낱말파악하기', '문자열거르고분류하기']
lexical conventions ['어휘 만드는 방법']
lexical scope ['생김새로 결정되는 유효 범위']
lexicographic order ['사전적 순서', '가나다 순서']
line continuation ['줄 걸쳐쓰기']
linear function ['직선 함수']
linear type ['일회성인지 추적하는 타입', '선형 타입']
linearizable ['줄세울 수 있는']
list ['리스트']
liveness property ['진행하는 성질', '결국성질', '결국에는 일어날 성질', '언젠간성질', '언젠가는 일어날 성질 ']
local definition ['우물안 정의', '그동네 정의']
logical relation ['타입구조를 타고 정의되는 관계', '논리 관계', '타입구조를 타고 조립되는 관계']
machine learning ['기계 학습']
match ['어울리기', '패턴에 맞추기']
memoization ['기억해두기', '메모해두기']
memory leak ['재활용 놓치기', '메모리 누수']
merge sort ['뭉쳐가며 정렬', '합치기 정렬']
meta programming ['프로그램을 프로그램하기', '프로그래밍을 프로그래밍하기', '프로그램을 다루는 프로그래밍']
metalanguage ['언어를 설명하는 언어', '메타언어']
method overloading ['여러함수를 같은 이름으로']
mode ['양식 ']
model checking ['맞나 확인하기', '모델 검증', '모델 체킹']
module ['모듈']
monkey patch ['기습 바꾸기']
mono-variant analysis ['다수의 프로그램 흐름을 하나로 요약하는 분석', '다대일 분석']
monolithic ['통짜', ' 통짜형', '일체형', '하나로', ' 한통으로', '단조로운']
mutable ['변할수있는', '가변 ']
mutual recursive ['서로 호출하는', '맞재귀', '서로 맞물려서 호출하는']
negation ['뒤집기']
network ['네트워크', '넷트웍']
node ['노드']
non-deterministic ['운에 기대는', '한가지로 정해지지 않은', '계산이 모든가지로 퍼지는', '모든가지를 한꺼번에 다하는']
non-deterministic polynomial ['모든가지를 한꺼번에 다할때 다항시간에 풀리는', '운에 기대면 다항시간 안에 풀리는']
non-expansive ['새 메모리를 쓰지않는']
normal form ['표준형', '바른꼴']
null ['없는 주소', '헛 주소']
null dereference ['없는주소 접근', '헛주소 접근']
null pointer ['텅빈주소', '길잃은 주소', '갈곳없는 포인터', '공포인터', '빈 포인터']
object ['물건']
object-oriented language ['물건중심 언어', '메세지 중심 언어']
operational semantics ['실행과정을 드러내는 의미구조', '계산과정을 드러내는 의미구조']
operator ['연산자']
or-pattern ['무더기 패턴']
ordered relation ['순서 관계']
out-of-order  ['순서없는', ' 뒤죽박죽인', ' 순서를 따르지않는', '위아래가 없는', '비순차', '새치기']
out-of-order execution ['새치기 실행']
overflow ['넘침 ', '계산넘침', ' 스택넘침']
overhead ['치른비용', '부담  ', '비용  ', '따름비용']
parameter ['인자', '매개변수']
parameterized module ['일반화된 모듈']
parametric polymorphism ['모든타입에 열려있는 다형성', '모든타입 다형성', '다형성', ' 타입상관 없음', ' 타입상관 안함']
parity function ['홀짝 함수']
parsing ['쪼개서 이해하기', '문장모양확인하기', '문장구조확인하기', '문장구조복구하기']
partial function ['부분 정의 함수', '일부만 정의된 함수', '일부만 함수']
pattern ['패턴']
pattern match ['패턴에 맞추기', '패턴에 대보기']
pattern row ['레코드 패턴']
pointer ['메모리주소', '주소 변수']
polymorphic ['여러 모양의', '다형의', '여러 타입을 가지는', '모양이 다양한']
polymorphic function ['다형 함수', '인자 타입에 상관없는 함수']
polymorphism ['타입상관없음', ' 타입상관안함', '타입 적응하는', '다형성']
polyvariant analysis ['다수의 프로그램 흐름을 하나이상으로 요약하는 분석', '다형성을 가지는 분석', '다대다 분석']
postfix ['뒤에 붙는']
precedence ['우선순위']
predicate ['논리식', '논리조건', '조건식']
predicate abstraction ['조건식을 변수 하나로 요약하기', '논리조건의 요약', '조건식 요약', '논리조건을 변수 하나로 요약하기', '논리식을 변수 하나로 요약하기', '논리식 요약']
predicate logic ['술어 논리', '모든-어떤 논리']
prefix ['앞에 붙는']
primitive ['기본']
primitive recursive function ['기본적인 재귀함수', '원시적인 재귀함수']
principal type ['대표 타입', '가장 일반적인 타입']
probably approximately correct, PAC ['얼추거의맞는', '얼추거의맞기', '대개거의맞는']
program synthesis ['프로그램 자동생성', '프로그램 합성']
programming language ['프로그래밍 언어']
query ['뭐냐', ' 물음', ' 묻기', ' 알아봐죠', '퀴어리']
ramdomization ['무작위']
ramdomized algorithm ['무작위 알고리즘']
reasoning ['이치따지기']
record ['레코드']
recursive ['자기호출', '자기자신을 부르는']
recursive function ['자기호출함수', '재귀함수', '자기자신을 부르는 함수']
recursive primitive definition ['원시적 자기참조 정의']
reduction ['수행', '계산', '줄이기']
refactoring ['코드정리하기', '코드 정리정돈하기']
reference ['메모리 주소', '지목값', '인용 ']
reference manual ['참고서']
refinement type ['다듬어가는 타입']
rewrite ['재작성', '다시쓰기', '바꿔쓰기']
rewrite rule ['다시쓰기 규칙']
rewrite semantics ['다시쓰기로 정의한 의미구조']
runtime ['실행시간', '실행 와중', '실행중', '실행환경']
safety property ['항상성질', '늘 유지되는 성질', '항상 유지되는 성질', '늘성질']
scaffolding code ['테스트 발판 코드', '테스터 코드']
scheme ['틀']
scope ['유효범위']
semantics ['뜻', '속내용', '의미', '의미구조']
separated sum ['출신을 기억하는 합집합', '출신기억 합집합']
separation logic ['분리논리', '따로논리']
sequence ['일렬', '나열']
sharding ['여러 창고에 나누어 보관하는']
short-circuit evaluation ['가로질러 계산하기', '지름길계산', '단축계산', '금메달계산']
side-effect ['따라 일어나는 일', '메모리 반응', '수반되는 효과', '함께오는 효과', '부수효과']
signature ['모듈타입']
signature instantiation ['모듈 타입의 실현']
signature matching ['모듈타입에 대보기', '모듈타입에 맞추기']
simple type ['단순 타입']
skolemization ['안전한 정량자 제거', '안전하게 정량자 제거하기']
soundness ['올바름', '믿을만함', '안전함', '안전성']
spanning tree ['전부 덮는 나무', '다 덮는 나무']
sparse data structure ['듬성듬성한 데이타구조', '거의 빈 데이타구조']
sparse vector ['거의 빈 벡터', '듬성듬성한 벡터']
specification ['설명서', '명세']
statement ['컴터문', '프로그램문', ' 프로그램식', ' 글', ' 문장']
static analysis ['정적분석', '정적 프로그램분석']
static scope ['정적 유효범위', '미리 결정된 이름의 유효범위']
static scoping ['이름의 유효범위가 미리 결정된', '실행전에 결정되는 이름의 실체']
static semantics ['프로그램 기획', '프로그램의 타입 의미구조', '정적 의미구조']
static type ['실행전에 파악된 타입']
statically typed language ['실행전에 타입검사하는 언어', '미리 타입검사하는 언어', '계산전에 타입검사하는 언어']
strict evaluation ['일단 값을 계산하고 보는', '적극적 계산법']
string ['글자실', '문자열']
structure ['모듈']
structure bind ['모듈 정의']
structure description ['모듈 접속방안']
structure expression ['모듈식']
substitution ['바꿔치기']
subtype ['하위타입', '아래타입']
subtype polymorphism ['하위타입 다형성', '아래타입 다형성', '하위타입에 한정되는 다형성', '아래타입에 한정되는 다형성']
supertype ['위타입', '상위타입']
symbol ['심벌']
syntactic constraint ['문법적인 제약', '생김새 조건']
syntactic sugar ['문법적 편의사항', '제로칼로리 문법', '설탕문법', '설탕구조']
syntax ['생김새', '문법구조', '겉모양', '문법']
syntax analysis ['겉모양 분석', '생김새 분석', '문법 구조 분석']
tail recursive ['마지막에 자기자신을 부르는', '꼬리재귀', '자기 호출이 마지막인', '끝재귀']
template ['거푸집']
temporal logic ['시간논리']
term ['항   ', '식']
test-driven development ['해보기 전에 채점하며 개발하기', '테스트중심 개발']
top declaration ['가장 위 선언']
top-down program synthesis ['전체에서 부품으로 프로그램 합성하기', '빈칸메꾸기로 합성하기', '큰 틀을 먼저 정하면서 프로그램 합성하기', '위에서부터 프로그램 합성해하기', '아래로 합성', '메뉴부터 정해서 프로그램 요리하기']
top-level declaration ['가장 위 선언']
total function ['완전 정의 함수', '완전히 정의된 함수', '전체 함수', '다덤벼 함수']
transaction ['되거나 안 되거나', '지르기', '해버리기', '담판 ']
tree ['나무구조', '가지구조']
tuple ['짝', '줄모임']
type ['타입']
type abbreviation ['타입 줄임말']
type bind ['타입 정의']
type constructor ['타입 구성자']
type expression ['타입식']
type inference ['타입 유추하기', '타입 알아내기', '타입유추']
type instantiation ['타입 틀 적용', '타입 틀 구체화']
type realization ['타입 틀 실현']
type scheme ['타입 틀']
type scheme generalization ['타입 틀 만들기', '타입 틀로 일반화하기']
type scheme instantiation ['타입 틀 구체화', '타입 틀 적용']
type structure ['타입 구조']
type variable ['타입 변수']
typing rule ['타입 결정 규칙', '타입 유추 규칙']
unary ['인자가 하나인']
uncurrying ['야금야금 함수를 단번 함수로', '언커링']
undecidable ['늘 정답내기가 컴퓨터로는 불가능한', '컴퓨터로는 불가능한', '컴퓨터로 늘 정답내기는 불가능한', '컴퓨터로는 할 수 없는']
unification ['동일화', '통일하기', '같게 만들기']
univerally quantified type ['타입변수가 모든 타입으로 바꿔치기될 수 있는']
universal machine ['보편만능 기계']
value ['값']
value bind ['값 정의']
variable ['변수']
variant type ['모둠 타입', '모듬타입', '가지 타입', '갈래 타입']
weak/relaxed memory ['시간순서가 느슨한 메모리', '느긋한 메모리', '옛값과 새값의 경계가 느슨한 메모리', '느슨한 메모리 ']
weakly consistent memory ['약한 메모리']
well-formed ['제대로 생긴', '잘 만든', '잘생긴']
well-founded ['탄탄한', '바닥이 있는', '올바르게 기초한', '바닥이 갖추어진']
widening ['축지법']
wild pattern ['임의 패턴']
